    name: Build and Push Docker

    on:
    push:
        branches: ['main', 'scrapper']

    env:
    REGISTRY: docker.io
    IMAGE_NAME: ${{ github.repository }}
    CONTAINER_NAME: django


    jobs:
    build-and-push-image:
        runs-on: ubuntu-latest
        permissions:
        contents: read
        packages: write

        steps:

        - name: Checkout repository
            uses: actions/checkout@v3

        - name: Log in to the Container registry
            uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
            with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Extract metadata (tags, labels) for Docker
            id: meta
            uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
            with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

        - name: Extract metadata (tags, labels) for Docker
            id: meta2
            uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
            with:
            images: ${{ env.REGISTRY }}/maxconformance/proxy

        - name: Build and push Docker image
            uses: docker/build-push-action@v4.1.1
            with:
            context: .
            push: true
            target: builder
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
        
        - name: Build and push Docker Proxy image
            uses: docker/build-push-action@v4.1.1
            with:
            context: .
            push: true
            target: deployer
            tags: ${{ steps.meta2.outputs.tags }}
            labels: ${{ steps.meta2.outputs.labels }}
            
        - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS }}
            aws-region: ap-south-1
        
        # - name: Deploy Amazon ECS task definition
        #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        #   with:
        #     task-definition: .deploy/ecs-task-definition.json
        #     service: mc-application
        #     cluster: ProdCluster
        #     force-new-deployment: true
        - name: Update ECS Service
            run: |
            aws ecs update-service --cluster ProdCluster --service mc-application --desired-count 1 --force-new-deployment